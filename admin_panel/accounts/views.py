from django.http import JsonResponse
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .forms import ContentForm
from .serializers import ContentSerializer
from rest_framework.decorators import api_view, parser_classes
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.response import Response
from .models import Content
import cv2
import numpy as np
import torch
from torchvision import models, transforms
from PIL import Image
from scipy.spatial.distance import cosine

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('content_list')  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        else:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    return render(request, 'accounts/login.html')

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def content_list(request):
    contents = Content.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã
    return render(request, 'accounts/content_list.html', {'contents': contents})

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def add_content(request):
    if request.method == 'POST':
        print("üîç –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–æ—à—ë–ª
        form = ContentForm(request.POST, request.FILES)
        if form.is_valid():
            print("‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞!")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
            form.save()
            messages.success(request, "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            return redirect('content_list')
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ:", form.errors)  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
            messages.error(request, "–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    else:
        form = ContentForm()

    return render(request, 'accounts/add_content.html', {'form': form})

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def edit_content(request, content_id):
    content = get_object_or_404(Content, id=content_id)

    if request.method == 'POST':
        form = ContentForm(request.POST, request.FILES, instance=content)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            return redirect('content_list')
    else:
        form = ContentForm(instance=content)

    return render(request, 'accounts/edit_content.html', {'form': form, 'content': content})

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def delete_content(request, content_id):
    content = get_object_or_404(Content, id=content_id)
    content.delete()
    messages.success(request, "–ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—ë–Ω!")
    return redirect('content_list')

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@api_view(['GET'])
def content_list_api(request):
    contents = Content.objects.all()
    serializer = ContentSerializer(contents, many=True)
    return Response(serializer.data)

# API –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
@api_view(['POST'])
def increment_views_api(request, content_id):
    content = get_object_or_404(Content, id=content_id)
    content.views += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    content.save()
    return Response({"message": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω", "views": content.views})


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
model = models.resnet18(pretrained=True)
model.eval()  # –ü–µ—Ä–µ–≤–æ–¥ –≤ —Ä–µ–∂–∏–º –æ—Ü–µ–Ω–∫–∏









# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ ResNet50
resnet50_model = torch.nn.Sequential(*list(models.resnet50(pretrained=True).children())[:-1])
resnet50_model.eval()

def extract_colored_regions(image):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±–ª–∞—Å—Ç–∏ —Å –∫—Ä–∞—Å–Ω–æ–π –æ–±–≤–æ–¥–∫–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –º–µ–ª–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã.
    """
    hsv_image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    lower_red1 = np.array([0, 120, 70])
    upper_red1 = np.array([10, 255, 255])
    lower_red2 = np.array([150, 120, 70])
    upper_red2 = np.array([180, 255, 255])

    mask1 = cv2.inRange(hsv_image, lower_red1, upper_red1)
    mask2 = cv2.inRange(hsv_image, lower_red2, upper_red2)
    combined_mask = cv2.bitwise_or(mask1, mask2)

    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3, 3))
    combined_mask = cv2.morphologyEx(combined_mask, cv2.MORPH_CLOSE, kernel, iterations=2)

    contours, _ = cv2.findContours(combined_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    regions = []
    for contour in contours:
        area = cv2.contourArea(contour)
        if area < 10000:
            continue
        x, y, w, h = cv2.boundingRect(contour)
        region = image[y:y + h, x:x + w]
        regions.append((region, (x, y, w, h)))

    return regions, combined_mask

def extract_features(image):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π ResNet50.
    """
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])

    image_pil = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    image_tensor = transform(image_pil).unsqueeze(0)

    with torch.no_grad():
        features = resnet50_model(image_tensor).squeeze().numpy()

    return features

@api_view(['POST'])
@parser_classes([MultiPartParser, FormParser])
def compare_image_api(request):
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–∂–µ—Å—Ç–∏.
    """
    print("üîç compare_image_api –≤—ã–∑–≤–∞–Ω!")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
    if 'file' not in request.data:
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ")
        return Response({"error": "–ù–µ—Ç —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ"}, status=400)

    uploaded_file = request.data['file']
    print("üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω")

    try:
        uploaded_image = Image.open(uploaded_file).convert("RGB")
        uploaded_image_array = np.array(uploaded_image)
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤ –º–∞—Å—Å–∏–≤")

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫—Ä–∞—Å–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        regions, _ = extract_colored_regions(uploaded_image_array)
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
        if not regions:
            return Response({"message": "–û–±–ª–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}, status=200)

        active_contents = Content.objects.filter(is_active=True)
        similarity_results = []

        for content in active_contents:
            if content.image and content.image.path:
                try:
                    content_image = cv2.imread(content.image.path)
                    if content_image is None:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {content.name}")
                        continue

                    for region, _ in regions:
                        content_features = extract_features(content_image)
                        region_features = extract_features(region)
                        similarity = 1 - cosine(region_features, content_features)
                        similarity_percentage = similarity * 100

                        similarity_results.append((content, similarity_percentage))
                        print(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å {content.name}: —Å—Ö–æ–∂–µ—Å—Ç—å {similarity_percentage:.2f}%")

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ {content.name}: {e}")

        if similarity_results:
            best_match, best_similarity = max(similarity_results, key=lambda x: x[1])
            return Response({
                "message": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!",
                "content_name": best_match.name,
                "content_file": best_match.file.url,
                "similarity": round(best_similarity, 2)
            }, status=200)

        return Response({"message": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}, status=200)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return Response({"error": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"}, status=400)