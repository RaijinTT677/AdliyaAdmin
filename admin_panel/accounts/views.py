import imagehash
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from .forms import ContentForm  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
from rest_framework.decorators import api_view, parser_classes
from rest_framework.response import Response
from django.shortcuts import get_object_or_404
from .models import Content
from .serializers import ContentSerializer
from rest_framework.parsers import MultiPartParser, FormParser
import uuid
from rest_framework.decorators import api_view
from rest_framework.response import Response
import cv2
import numpy as np
from .models import Content
from PIL import Image


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('content_list')  # –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        else:
            messages.error(request, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')

    return render(request, 'accounts/login.html')


# –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def content_list(request):
    contents = Content.objects.all()  # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã
    return render(request, 'accounts/content_list.html', {'contents': contents})


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def add_content(request):
    if request.method == 'POST':
        print("üîç –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –¥–æ—à—ë–ª
        form = ContentForm(request.POST, request.FILES)
        if form.is_valid():
            print("‚úÖ –§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞!")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è
            form.save()
            messages.success(request, "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            return redirect('content_list')
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–µ:", form.errors)  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã
            messages.error(request, "–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
    else:
        form = ContentForm()

    return render(request, 'accounts/add_content.html', {'form': form})


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def edit_content(request, content_id):
    content = get_object_or_404(Content, id=content_id)

    if request.method == 'POST':
        form = ContentForm(request.POST, request.FILES, instance=content)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            return redirect('content_list')
    else:
        form = ContentForm(instance=content)

    return render(request, 'accounts/edit_content.html', {'form': form, 'content': content})


# –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@login_required
def delete_content(request, content_id):
    content = get_object_or_404(Content, id=content_id)
    content.delete()
    messages.success(request, "–ö–æ–Ω—Ç–µ–Ω—Ç —É–¥–∞–ª—ë–Ω!")
    return redirect('content_list')


@api_view(['GET'])
def content_list_api(request):
    contents = Content.objects.all()
    serializer = ContentSerializer(contents, many=True)
    return Response(serializer.data)


@api_view(['POST'])
def increment_views_api(request, content_id):
    content = get_object_or_404(Content, id=content_id)
    content.views += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    content.save()
    return Response({"message": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Å—á–∏—Ç–∞–Ω", "views": content.views})


@api_view(['POST'])
@parser_classes([MultiPartParser, FormParser])
def compare_image_api(request):
    print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.method}")
    print(f"üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {request.data}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
    if 'file' not in request.data:
        return Response({"error": "–ù–µ—Ç —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ"}, status=400)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ —Ö—ç—à
    uploaded_file = request.data['file']
    try:
        uploaded_image = Image.open(uploaded_file)
        uploaded_image_hash = str(imagehash.phash(uploaded_image))
        print(f"üîç –•—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {uploaded_image_hash}")
    except Exception as e:
        return Response({"error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}"}, status=400)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ö—ç—à–µ–º
    active_contents = Content.objects.filter(is_active=True).exclude(name__isnull=True).exclude(name__exact='')
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–æ–≤: {active_contents.count()}")

    closest_match = None
    smallest_difference = float('inf')

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for content in active_contents:
        if content.image_hash:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—Å—Ç—å —Ö—ç—à
            existing_hash = imagehash.hex_to_hash(content.image_hash)
            difference = uploaded_image_hash - existing_hash  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö—ç—à–∏
            print(f"üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å {content.name}: —Ä–∞–∑–Ω–∏—Ü–∞ {difference}")

            if difference < smallest_difference:  # –ï—Å–ª–∏ —ç—Ç–æ –ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                smallest_difference = difference
                closest_match = content

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if closest_match:
        return Response({
            "message": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!",
            "content_name": closest_match.name,
            "content_file": closest_match.file.url,
            "difference": smallest_difference
        }, status=200)

    # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    return Response({"message": "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."}, status=404)